class Solution {
public:


    bool isValidPath(int n, int source, int dest, map<int, vector<int>>& mp, vector<int>& visited ){

        if(source == dest){
            return true;
        }

        if(visited[source]) return false;
        visited[source] = 1;


        for(int i = 0; i < mp[source].size(); i++){

            if(isValidPath(n, mp[source][i], dest, mp, visited)) return true;

        }
        return false;




    }

    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {

        map<int, vector<int>> mp;
        vector<int> visited(n);

        for(int i = 0; i < edges.size(); i++){

            int u = edges[i][0];
            int v = edges[i][1];

            mp[u].push_back(v);
            mp[v].push_back(u);
        }

        return isValidPath(n, source, destination, mp, visited);







        
    }
};